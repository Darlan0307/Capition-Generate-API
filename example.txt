import express from "express";
import Stripe from "stripe";
import bodyParser from "body-parser";

const app = express();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-06-20",
});

// ✅ Endpoint para criar sessão de checkout
app.post("/checkout-session", async (req, res) => {
  try {
    const session = await stripe.checkout.sessions.create({
      mode: "subscription", // assinatura recorrente
      payment_method_types: ["card"],
      line_items: [
        {
          price: process.env.STRIPE_PREMIUM_PRICE_ID, // ID do preço cadastrado no Stripe Dashboard
          quantity: 1,
        },
      ],
      success_url: "http://localhost:3000/sucesso", // frontend
      cancel_url: "http://localhost:3000/cancelado",
    });

    res.json({ url: session.url });
  } catch (err) {
    res.status(500).json({ error: "Erro ao criar sessão" });
  }
});

// ✅ Webhook do Stripe para capturar eventos de pagamento
app.post("/webhook", bodyParser.raw({ type: "application/json" }), (req, res) => {
  const sig = req.headers["stripe-signature"] as string;

  let event;
  try {
    event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET!
    );
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${(err as Error).message}`);
  }

  // Eventos importantes
  if (event.type === "checkout.session.completed") {
    const session = event.data.object as Stripe.Checkout.Session;
    console.log("💰 Assinatura iniciada:", session.customer);

    // Aqui você atualiza o usuário no seu banco como PREMIUM
    // Exemplo: User.update({ stripeCustomerId: session.customer, isPremium: true })
  }

  if (event.type === "invoice.payment_failed") {
    const invoice = event.data.object as Stripe.Invoice;
    console.log("❌ Pagamento falhou para:", invoice.customer);

    // Aqui você pode desativar o premium do usuário
  }

  res.json({ received: true });
});

app.listen(4000, () => console.log("Servidor rodando na porta 4000"));
